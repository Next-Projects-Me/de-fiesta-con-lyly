// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Gender {
  id   Int    @id @default(autoincrement())
  name String
}

model Color {
  id           Int            @id @default(autoincrement())
  name         String
  ProductColor ProductColor[]
}

model ProductColor {
  id Int @id @default(autoincrement())

  color   Color @relation(fields: [colorId], references: [id])
  colorId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Size {
  id          Int           @id @default(autoincrement())
  name        String
  ProductSize ProductSize[]
}

model ProductSize {
  id Int @id @default(autoincrement())

  size   Size @relation(fields: [sizeId], references: [id])
  sizeId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}

model Costs {
  id    Int    @id @default(autoincrement())
  name  String
  price Float
}

model City {
  id   Int    @id @default(autoincrement())
  name String

  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int

  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model Department {
  id   Int    @id @default(autoincrement())
  name String

  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
  City         City[]
}

model Category {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  icon     Int
  isActive Boolean @default(true)

  Subcategory Subcategory[]
}

model Subcategory {
  id       Int     @id @default(autoincrement())
  name     String
  isActive Boolean @default(true)

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  Product Product[]
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Product {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  inStock     Int
  price       Float    @default(0)
  slug        String   @unique
  sizes       String[]
  genders     String[]
  colors      String[]
  numbers     String[]
  letters     Boolean  @default(false)
  tags        String[]

  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  subcategoryId Int

  OrderItem    OrderItem[]
  ProductImage ProductImage[]
  ProductColor ProductColor[]
  ProductSize  ProductSize[]
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  google        Boolean   @default(false)
  isActive      Boolean   @default(true)

  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  Order       Order[]
  UserAddress UserAddress?
}

model Order {
  id           Int       @id @default(autoincrement())
  code         String    @unique
  subTotal     Float
  tax          Float
  sendingCost  Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paidAt       DateTime?
  paymentLink  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  OrderItem    OrderItem[]
  OrderAddress OrderAddress?
}

model OrderItem {
  id       Int     @id @default(autoincrement())
  quantity Int
  price    Float
  sizes    String?
  genders  String?
  colors   String?
  numbers  String?
  letters  String?

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model UserAddress {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  address   String
  address2  String?
  phone     String
  document  String

  city   City @relation(fields: [cityId], references: [id])
  cityId Int

  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model OrderAddress {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  address   String
  address2  String?
  phone     String
  document  String

  city   City @relation(fields: [cityId], references: [id])
  cityId Int

  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int   @unique
}
